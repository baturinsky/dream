{
  "version": 3,
  "sources": ["../src/palettes.ts", "../src/graphics.ts", "../src/util.ts", "../src/entity.ts", "../src/debug.ts", "../src/controls.ts", "../src/init.ts", "../src/main.ts"],
  "sourcesContent": ["export type RGBA = [number, number, number, number]\r\n\r\nexport function convertPalette(raw: string) {\r\n  return [...raw.matchAll(/(\\w\\w)(\\w\\w)(\\w\\w)/g)].map(v => v.slice(1, 4).map(v => Math.round(Number.parseInt(v, 16) / 255 * 35).toString(36)).join('')).join('')\r\n}\r\n\r\nexport function parsePalette(raw: string) {\r\n  return [...raw.matchAll(/(\\w)(\\w)(\\w)/g)].map(v => [...v.slice(1, 4).map(v => ~~(Number.parseInt(v, 36) / 36 * 100) / 100),1]) as RGBA[]\r\n}\r\n\r\nexport const generatePalette = () => [...new Array(36)].map((_, i) =>\r\n  i < 6 ? [i / 6, i / 6, i / 6, 1] :\r\n    i < 10 ? [0, 0, 0, i / 4 - 1] :\r\n      [i % 3 *.45, ~~(i / 9) / 2 - .5, ~~(i / 3) % 3 * .45, 1]\r\n) as RGBA[];\r\n\r\nexport const sweetie16 = `1a1c2c\r\n257179\r\n38b764\r\na7f070\r\n\r\n5d275d\r\nb13e53\r\nef7d57\r\nffcd75\r\n\r\n\r\n29366f\r\n3b5dc9\r\n41a6f6\r\n73eff7\r\n\r\n333c57\r\n566c86\r\n94b0c2\r\nf4f4f4\r\n`\r\n\r\nexport const dawnbringer =\r\n  `140c1c\r\n4e4a4e\r\n757161\r\n8595a1\r\ndeeed6\r\n442434\r\n30346d\r\n597dce\r\n6dc2ca\r\n854c30\r\nd27d2c\r\nd2aa99\r\ndad45e\r\n346524\r\n6daa2c\r\nd04648\r\n`\r\nexport const endesga32 = `be4a2f\r\nd77643\r\nead4aa\r\ne4a672\r\nb86f50\r\n733e39\r\n3e2731\r\na22633\r\ne43b44\r\nf77622\r\nfeae34\r\nfee761\r\n63c74d\r\n3e8948\r\n265c42\r\n193c3e\r\n124e89\r\n0099db\r\n2ce8f5\r\nffffff\r\nc0cbdc\r\n8b9bb4\r\n5a6988\r\n3a4466\r\n262b44\r\n181425\r\nff0044\r\n68386c\r\nb55088\r\nf6757a\r\ne8b796\r\nc28569\r\n`\r\nexport const pineapple32 =\r\n`43002a\r\n890027\r\nd9243c\r\nff6157\r\nffb762\r\nc76e46\r\n73392e\r\n34111f\r\n030710\r\n273b2d\r\n458239\r\n9cb93b\r\nffd832\r\nff823b\r\nd1401f\r\n7c191a\r\n310c1b\r\n833f34\r\neb9c6e\r\nffdaac\r\nffffe4\r\nbfc3c6\r\n6d8a8d\r\n293b49\r\n041528\r\n033e5e\r\n1c92a7\r\n77d6c1\r\nffe0dc\r\nff88a9\r\nc03b94\r\n601761`", "import { outl, quadSize, filters, palette, roomHeight } from \"./main\";\r\ndeclare var Scene: HTMLDivElement, img: HTMLImageElement, div1: HTMLDivElement, DEFS: Element;\r\n\r\n/**Generates a copy of red-green canvas with specified recolor */\r\nexport function recolor(s: HTMLCanvasElement, filter: string) {\r\n  let t = s.cloneNode() as HTMLCanvasElement;\r\n  gcx(t).filter = constructFilter(filter);\r\n  gcx(t).drawImage(s, 0, 0);\r\n  return t\r\n}\r\n\r\nexport function filtered(sprite: number, filter: string, margin = 0) {\r\n  let [c, ctx] = cc(quadSize + margin * 2);\r\n  c.id = filter + sprite;\r\n  ctx.filter = `url(#_${filter})`\r\n  ctx.drawImage(img, sprite % quadSize * quadSize, ~~(sprite / quadSize) * quadSize, quadSize, quadSize, margin, margin, quadSize, quadSize);\r\n  return c\r\n}\r\n\r\nexport function gcx(c: HTMLCanvasElement) {\r\n  return c.getContext(\"2d\") as CanvasRenderingContext2D\r\n}\r\n\r\nexport function constructFilter(cab: string) {\r\n  if (!filters.has(cab)) {\r\n    filters.add(cab);\r\n    let [a, b] = [...cab].map(c => palette[Number.parseInt(c, 36)]);\r\n    let f = `<filter id=f${cab}><feColorMatrix type=matrix values=\"${a[0]} ${b[0]} 0 0 0  ${a[1]} ${b[1]} 0 0 0  ${a[2]} ${b[2]} 0 0 0  0 0 0 1 0\" /></filter>`\r\n    DEFS.innerHTML += f;\r\n  }\r\n  return `url(#f${cab})`\r\n}\r\n\r\n/**Creates a size*size canvas and returns it with context */\r\nexport function cc(size:number, options?) {\r\n  let c = document.createElement(\"canvas\")\r\n  c.classList.add(\"sprite\")\r\n  c.width = c.height = size;\r\n  Object.assign(c, options);\r\n  return [c, gcx(c)] as [HTMLCanvasElement, CanvasRenderingContext2D];\r\n}\r\n\r\nexport const createPattern = (original: HTMLCanvasElement) => gcx(original).createPattern(original, \"repeat\") as CanvasPattern;\r\n\r\nexport function numsToColors(a:number,b:number){\r\n  return a.toString(36) + b.toString(36)\r\n}", "import { XYZ } from \"./entity\";\r\n\r\n/**Sum of vectors a+b*m */\r\nexport const sum = (a: number[], b: number[], m = 1) => a.map((v, i) => v + b[i] * m) as number[];\r\nexport const sub = (a: number[], b: number[]) => sum(a, b, -1);\r\n\r\n/**length of vector */\r\nexport const vlen = (a: number[]) => a.reduce((p, c) => p + c * c, 0) ** .5;\r\n\r\nexport const dist = (a: number[], b: number[]) => vlen(sub(b, a));", "import { cc, recolor, gcx } from \"./graphics\";\r\nimport { cols, outl, roomHeight, roomWidth, entities, current } from \"./main\";\r\nimport { dist, sub, sum } from \"./util\";\r\n\r\ndeclare var Scene: HTMLDivElement, img: HTMLImageElement, div1: HTMLDivElement, DEFS: Element;\r\n\r\nexport type XY = [number, number];\r\nexport type XYZ = [number, number, number];\r\nexport let X = 0, Y = 1, Z = 2;\r\n\r\nexport enum EntityKind { CHAR = 1, FURNITURE = 2 };\r\n\r\nexport enum ActionKind { MOVE = 1, PICK = 2 };\r\n\r\nexport type Action = {\r\n  kind: ActionKind\r\n  start: (e: Entity) => boolean\r\n  update: (e: Entity) => boolean\r\n}\r\n\r\nexport function walkTo(e: Entity, to: XYZ, duration?: number) {\r\n  let from = e.pos, start = Date.now();\r\n  duration ??= dist(e.pos, to) * 10;\r\n  let dx = to[0] - e.pos[0];\r\n  if (dx != 0)\r\n    e.right = dx > 0;\r\n  let posDelta = sub(to, from);\r\n  return () => {\r\n    let t = Date.now();\r\n    let timeFromStart = Math.min(t - start, duration);\r\n    e.pos = sum(from, posDelta, duration ? timeFromStart / duration : 1) as XYZ;\r\n    let finished = timeFromStart >= duration;\r\n    e.transform = finished ? `` : `rotateZ(${Math.sin(t / 1e2) * 5}deg)`;\r\n    return !finished;\r\n  }\r\n}\r\n\r\n\r\nexport type SpriteLayout = {\r\n  /**Bits ids and colors */\r\n  bits?: ([number, string] | null | undefined)[],\r\n  /**Bits positions */\r\n  bitPos: XY[]\r\n  /**Function which creates bitPos from Entity data */\r\n  makeBits: (e: Entity) => any[],\r\n  /**Size of the grid*/\r\n  size: XY\r\n  /**transform-origin */\r\n  origin: string\r\n}\r\n\r\nexport type Gear = {\r\n  hand?: Entity\r\n  body?: Entity\r\n}\r\n\r\nexport type Entity = SpriteLayout & Gear & {\r\n  /**Canvas */\r\n  canvas: HTMLCanvasElement,\r\n  /**Position */\r\n  pos: XYZ,\r\n  /**Looking right */\r\n  right?: boolean\r\n  scale: number\r\n  id?: number\r\n  kind: EntityKind\r\n  children: Entity[]\r\n  actionsQueue: Function[]\r\n  animation?: Function\r\n  /**Main colors */\r\n  colors: string\r\n  /**Main shape */\r\n  shape: number\r\n  transform: string\r\n  pickable: boolean\r\n}\r\n\r\n\r\nexport const\r\n  CharLayout = {\r\n    bitPos: [[11, 0], [10, 14], [11, 10], [10, 13], [3, 6]] as XY[],\r\n    size: [20, 24] as XY,\r\n    origin: \"50% 200%\",\r\n    makeBits: (e: Entity) => [\r\n      [e.shape, e.colors],\r\n      [LegShape, e.colors],\r\n      shapeAndColor(e.body),\r\n      [GloveShape, e.colors],\r\n      shapeAndColor(e.hand)\r\n    ],\r\n  } as Entity,\r\n  SimpleLayout = {\r\n    bitPos: [[0, 0]] as XY[],\r\n    size: [10, 10] as XY,\r\n    makeBits: (e: Entity) => [[e.shape, e.colors]]\r\n  } as Entity;\r\n\r\nexport const lookRight = \"scaleX(-1)\";\r\n\r\nexport function roomWalkAnimation(s: Entity, to: XYZ, duration?: number) {\r\n  let fromRoom = roomNumber(current.pos), toRoom = roomNumber(to);\r\n  if (toRoom == fromRoom)\r\n    return [() => walkTo(current, to)]\r\n  else\r\n    return [\r\n      () => walkTo(current, roomDoorPos(fromRoom)),\r\n      () => walkTo(current, roomDoorPos(toRoom), 0),\r\n      () => walkTo(current, to),\r\n    ]\r\n}\r\n\r\nexport function updateEntity(s: Entity, parentPos?: XYZ) {\r\n  if (!s.animation) {\r\n    let nextAction = s.actionsQueue.shift()\r\n    if (nextAction)\r\n      s.animation = nextAction();\r\n  }\r\n\r\n  if (s.animation && s.animation() == false) {\r\n    delete s.animation;\r\n  }\r\n\r\n  let c = s.canvas, t = Date.now();\r\n\r\n  let pos = parentPos ? sum(s.pos, parentPos) : s.pos;\r\n\r\n  c.style.left = `${pos[0] - s.size[0] / 2}px`\r\n  c.style.top = `${pos[2] - s.size[1]}px`\r\n\r\n  let transform = `translateZ(${pos[1]}px)` + (s.right ? lookRight : \"\") + `scale(${s.scale})` + (s.transform ?? '');\r\n\r\n  c.style.transform = transform;\r\n  return c;\r\n}\r\n\r\n\r\nexport function createCanvas(s: Entity) {\r\n  let [c] = cc(1);\r\n  c.style.position = \"absolute\";\r\n  c.id = \"s\" + s.id;\r\n  s.canvas = c;\r\n  updateCanvas(s)\r\n  return c;\r\n}\r\n\r\nconst LegShape = 0x20, GloveShape = 0x30;\r\n\r\nexport function shapeAndColor(e?: Entity) {\r\n  return e && [e.shape, e.colors] as [number, string];\r\n}\r\n\r\n\r\nexport function updateCanvas(s: Entity) {\r\n  if (s.makeBits) {\r\n    s.bits = s.makeBits(s);\r\n  }\r\n  let c = s.canvas;\r\n  c.width = s.size[0];\r\n  c.height = s.size[1];\r\n  c.style.transformOrigin = s.origin;\r\n  if (s.bits)\r\n    for (let i = 0; s.bits[i]; i++) {\r\n      let b = s.bits[i];\r\n      b && gcx(s.canvas).drawImage(recolor(outl[b[0]], b[1]), ...s.bitPos[i]);\r\n    }\r\n}\r\n\r\nlet lastSpriteId = 0;\r\n\r\nexport function createEntity(s: Entity) {\r\n  s.id ??= ++lastSpriteId;\r\n  let e = { canvas: createCanvas(s), floor: 0, scale: 1, actionsQueue: [], ...s as any } as Entity;\r\n  updateCanvas(e);\r\n  if (e.pos) {\r\n    entities.push(e)\r\n    Scene.appendChild(e.canvas)\r\n    updateEntity(e);\r\n  }\r\n  return e\r\n}\r\n\r\n\r\nexport function removeEntity(e: Entity) {\r\n  entities.splice(entities.indexOf(e), 1);\r\n  e.canvas.parentElement?.removeChild(e.canvas);\r\n}\r\n\r\nexport function takeEntity(e: Entity) {\r\n  current.hand = e;\r\n  updateCanvas(current);\r\n  removeEntity(e);\r\n}\r\n\r\nexport function dropEntity(e: Entity) {\r\n  if (e.hand) {\r\n    createEntity({ ...e.hand, pos: e.pos });\r\n    delete e.hand;\r\n    updateCanvas(e);\r\n  }\r\n}\r\n\r\nexport function roomNumber(pos: XYZ) {\r\n  return ~~(pos[0] / roomWidth) + cols * ~~(pos[2] / roomHeight - 1)\r\n}\r\n\r\nexport function roomDoorPos(n: number) {\r\n  return [(n % cols + .5) * roomWidth, 0, roomHeight * ~~(n / cols + 1)] as XYZ\r\n}\r\n\r\nexport function entityLook(e: Entity) {\r\n  return e && [e.shape, e.colors] as [number, string]\r\n}\r\n\r\nexport function charBits(e: Entity) {\r\n  return [[e.shape, e.colors], [0x20, e.colors], entityLook(e.body), [0x30, e.colors], entityLook(e.hand)]\r\n}\r\n\r\nexport function simple(shape, colors) {\r\n  return { ...SimpleLayout, shape, colors } as Entity;\r\n}", "import { mouseTarget } from \"./controls\";\r\nimport { palette, outl, roomHeight } from \"./main\";\r\nimport { convertPalette, generatePalette, parsePalette, RGBA, sweetie16 } from \"./palettes\";\r\nimport { createEntity, updateEntity, SimpleLayout } from \"./entity\";\r\n\r\ndeclare var Debug: HTMLDivElement, Preview: HTMLDivElement;\r\n\r\nexport let curFront = '1', curBack = '2', curSprite = 0;\r\n\r\nexport function toCSSColor([r, g, b, a]: RGBA) {\r\n  return `rgba(${r * 255},${g * 255},${b * 255},${a})`\r\n}\r\n\r\nexport function printPalette(p: RGBA[]) {\r\n  for (let i in p) {\r\n    let bg = toCSSColor(p[i])\r\n    console.log(`%c          %c ${Number(i).toString(36)} ${bg}`, `color:#00; background:${bg}`, `background:#fff`)\r\n  }\r\n\r\n}\r\n\r\nfunction showPaletteMenuOld() {\r\n  let raw3 = convertPalette(sweetie16),\r\n    palette = parsePalette(raw3);\r\n  console.log(raw3);\r\n  console.log(sweetie16);\r\n  for (let i in palette) {\r\n    let bg = `background: rgb(${palette[i].map(v => v * 255).join(',')})`;\r\n    console.log(`%c ${Number(i).toString(16)} ${raw3.slice((i as any) * 3, (i as any) * 3 + 3)} ${palette[i]}`, `color:#f0a; ${bg}`)\r\n    let b36 = Number(i).toString(36);\r\n    Debug.innerHTML += `<div class=csel id=\"C${b36}\" style=\"${bg}\" oncontextmenu=\"return false;\" >${b36}</div>`;\r\n  }\r\n}\r\n\r\nfunction showPaletteMenu() {\r\n  for (let i in palette) {\r\n    let bg = toCSSColor(palette[i]);\r\n    let b36 = Number(i).toString(36);\r\n    Debug.innerHTML += `<div class=csel id=\"C${b36}\" style=\"background:${bg}\" oncontextmenu=\"return false;\" >${b36}</div>`;\r\n  }\r\n}\r\n\r\nexport function showMenu() {\r\n  printPalette(palette)\r\n  showPaletteMenu()\r\n  outl.forEach(o => Debug.appendChild(o))\r\n}\r\n\r\n\r\n\r\nexport function debOnDown(e: MouseEvent) {\r\n  if (e.type != \"mousedown\")\r\n    return;\r\n\r\n  let [x,y,fl,v] = mouseTarget(e);\r\n\r\n  if (fl == 'f' && e.button == 0 && e.shiftKey) {\r\n    //repositionSprite(cat, [x, y], v);        \r\n    let p = createDebugSprite();\r\n    p.pos = [x, y, v * roomHeight];\r\n    updateEntity(p);\r\n  }\r\n\r\n  if (fl == 'O') {\r\n    curSprite = v;\r\n  }\r\n\r\n  if (fl == 'C') {\r\n    if (e.button == 0)\r\n      curFront = v;\r\n    else\r\n      curBack = v;\r\n  }\r\n\r\n  //console.log(e, curSprite, curFront, curBack);\r\n\r\n  Preview.innerHTML = \"\";\r\n  let p = createDebugSprite();\r\n  Preview.appendChild(p.canvas);\r\n}\r\n\r\nexport function createDebugSprite() {\r\n  return createEntity({ ...SimpleLayout, bits: [[curSprite, curFront + curBack]] })\r\n}", "import { debOnDown } from \"./debug\";\r\nimport { cat, current, roomHeight, entities } from \"./main\";\r\nimport { ActionKind, dropEntity, removeEntity, roomDoorPos, roomNumber, walkTo, takeEntity, updateEntity, XY, XYZ, roomWalkAnimation, Entity } from \"./entity\";\r\n\r\ndeclare var Scene: HTMLDivElement, img: HTMLImageElement, div1: HTMLDivElement, Back: HTMLCanvasElement, DEFS: Element, Menu: HTMLDivElement;\r\n\r\nexport let mpress: boolean[] = [], sp = { x: 0, y: 0 }, zoom = 400;\r\n\r\nexport function setActions(e: Entity, a: Function[]) {\r\n  if (!e)\r\n    return;\r\n  e.actionsQueue = a;\r\n  delete e.animation;\r\n}\r\n\r\nexport function initControls() {\r\n  onpointerup = e => {\r\n    mpress[e.button] = false;\r\n  }\r\n\r\n  onpointerdown = e => {\r\n    mpress[e.button] = true;\r\n\r\n    debOnDown(e);\r\n\r\n    let [x, y, fl, v] = mouseTarget(e);\r\n    let to = [x, y, v * roomHeight] as XYZ;\r\n    console.log(roomNumber(to));\r\n\r\n    let actions;\r\n\r\n    if (current && fl == \"f\" && !e.shiftKey) {\r\n      if (e.button == 0)\r\n        actions = roomWalkAnimation(current, to);\r\n      if (e.button == 2)\r\n        actions = [...roomWalkAnimation(current, to), () => dropEntity(current)];\r\n\r\n    }\r\n\r\n    if (current && fl == \"s\" && !e.shiftKey) {\r\n      let ts = entities.find(s => s.id == v);\r\n      if (ts && ts != current) {\r\n        if (e.button == 0)\r\n          actions = roomWalkAnimation(current, ts.pos)\r\n        if (e.button == 2)\r\n          actions = [\r\n            ...roomWalkAnimation(current, ts.pos),\r\n            () => {\r\n              dropEntity(current);\r\n              takeEntity(ts)\r\n            }\r\n          ];\r\n      }\r\n    }\r\n\r\n    if (actions)\r\n      setActions(current, actions);\r\n\r\n    oncontextmenu = e => {\r\n      if (!e.shiftKey)\r\n        e.preventDefault()\r\n    }\r\n\r\n    let t = e.target as HTMLElement;\r\n\r\n    if (t.classList.contains(\"sprite\")) {\r\n      //debugger\r\n    }\r\n  }\r\n\r\n  onmousemove = e => {\r\n    if (mpress[1]) {\r\n      let mul = 1;\r\n      sp.x += e.movementX * mul;\r\n      sp.y += e.movementY * mul;\r\n      Scene.style.left = `${sp.x}px`;\r\n      Scene.style.top = `${sp.y}px`;\r\n    }\r\n    e.preventDefault()\r\n  }\r\n\r\n  onwheel = e => {\r\n    zoom -= e.deltaY * .2;\r\n    rezoom()\r\n  }\r\n\r\n}\r\n\r\nexport function rezoom() {\r\n  Scene.style.transform = `translateZ(${zoom}px)`;\r\n}\r\n\r\n/** */\r\nexport function mouseTarget(e: MouseEvent) {\r\n  let [id, x, y] = [(e.target as HTMLElement).id, e.offsetX, e.offsetY];\r\n  /**First letter */\r\n  let fl = id[0], v = id.substring(1) as any;\r\n  return [x, y, fl, v]\r\n}\r\n\r\n\r\n", "import { roomWidth, roomDepth, rows, roomHeight, cols, outl, solid, transp, roomsNum } from \"./main\";\r\nimport { filtered, createPattern, recolor, gcx } from \"./graphics\";\r\n\r\ndeclare var Scene: HTMLDivElement, Back: HTMLCanvasElement, Front: HTMLCanvasElement;\r\n\r\n\r\nexport function prepareScene() {\r\n  let s = \"\"\r\n  for (let i = 0; i <= cols; i++) {\r\n    s += `<canvas class=wall  id=w${i} style=\"left:${i * roomWidth}px;height:${rows * roomHeight}px;width:${roomDepth}px\" \r\n    width=${roomDepth * 2} height=${rows * roomHeight * 2} /></canvas>`\r\n  }\r\n  for (let i = 0; i <= rows; i++) {\r\n    s += `<canvas class=floor id=f${i} style=\"top:${i * roomHeight}px;height:${roomDepth}px;width:${cols * roomWidth}px\" \r\n    width=${cols * roomWidth * 2} height=${roomDepth * 2}></canvas>`\r\n  }\r\n\r\n  Scene.innerHTML += s;\r\n  for (let d of [Back, Front]) {\r\n    d.width = roomWidth * cols * 2;\r\n    d.height = roomHeight * rows * 2;\r\n    d.style.width = `${roomWidth * cols}px`;\r\n    d.style.height = `${roomHeight * rows}px`;\r\n  }\r\n  Front.style.transform = `translateZ(${roomDepth}px)`\r\n}\r\n\r\n\r\nexport function loadTextures() {\r\n  for (let i = 0; i < 128; i++) {\r\n    solid.push(filtered(i, 'R'));\r\n    transp.push(filtered(i, 'T'));\r\n    outl.push(filtered(i, 'O', 1));\r\n  }\r\n\r\n  let brickPattern = createPattern(recolor(solid[1], \"2f\"))\r\n\r\n  let cb = gcx(Back);\r\n  cb.fillStyle = brickPattern;\r\n  cb.fillRect(0, 0, 1e4, 1e4);\r\n\r\n  cb = gcx(Front);\r\n  cb.fillStyle = createPattern(recolor(solid[1], \"2g\"))\r\n  for (let i = 0; i < cols; i++) cb.fillRect(i * roomWidth * 2 - 10, 0, 20, 1e4);\r\n  for (let i = 0; i < rows; i++) cb.fillRect(0, i * roomHeight * 2 - 10, 1e4, 20);\r\n\r\n\r\n  let wallPattern = createPattern(recolor(solid[2], \"gf\"))\r\n  document.querySelectorAll(\".wall\").forEach((div) => {\r\n    let cb = gcx(div as HTMLCanvasElement);\r\n    cb.fillStyle = wallPattern;\r\n    cb.fillRect(0, 0, 1e4, 1e4);\r\n  })\r\n\r\n  let floorPattern = createPattern(recolor(solid[3], \"rq\"))\r\n\r\n  document.querySelectorAll(\".floor\").forEach((div) => {\r\n    let cb = gcx(div as HTMLCanvasElement);\r\n    cb.fillStyle = floorPattern;\r\n    cb.fillRect(0, 0, 1e4, 1e4);\r\n  })\r\n\r\n}", "import { initControls, rezoom } from \"./controls\";\r\nimport { showMenu } from \"./debug\";\r\nimport { loadTextures, prepareScene } from \"./init\";\r\nimport { convertPalette, parsePalette, pineapple32 } from \"./palettes\";\r\nimport { CharLayout, createEntity, updateEntity, SimpleLayout, Entity, simple } from \"./entity\";\r\nimport { numsToColors } from \"./graphics\";\r\n\r\ndeclare var img: HTMLImageElement, FPS: HTMLDivElement;\r\n\r\nexport const roomDepth = 64, rows = 5, cols = 3, roomHeight = 100, roomWidth = 200, quadSize = 8, roomsNum = rows * cols;\r\n\r\nexport let\r\n  //palette = generatePalette(),\r\n  palette = parsePalette(convertPalette(pineapple32)),\r\n  filters = new Set(),\r\n  solid: HTMLCanvasElement[] = [],\r\n  transp: HTMLCanvasElement[] = [],\r\n  outl: HTMLCanvasElement[] = [];\r\n\r\nexport let catSprite: HTMLCanvasElement;\r\n\r\nexport let cat: Entity, pointer: Entity, current: Entity, entities: Entity[] = [];\r\n\r\nonload = () => {\r\n  img.onload = init;\r\n  img.src = 'sprites1bit.gif';\r\n}\r\n\r\ntype Char = {\r\n  race: number\r\n  skin: string\r\n}\r\n\r\nfunction init() {\r\n  prepareScene()\r\n  loadTextures()\r\n  showMenu()\r\n  rezoom()\r\n  initControls()\r\n  cat = createEntity(\r\n    {\r\n      ...CharLayout,\r\n      shape: 0x12,\r\n      colors: \"nm\",\r\n      //hand: simple(0x32, \"cd\"),\r\n      body: simple(0x2b, \"lk\"),\r\n      /*bits: [[0x12, \"nm\"], [0x20, \"nm\"], [0x2b, \"lk\"], [0x30, \"nm\"], [0x32, \"cd\"]],*/\r\n      pos: [20, 10, roomHeight],\r\n      right: false\r\n    });\r\n\r\n\r\n  current = cat;\r\n\r\n  for (let i = 0; i < 300; i++)\r\n    createEntity({\r\n      ...SimpleLayout,\r\n      shape: 0x50 + ~~(Math.random() * 14),\r\n      colors: numsToColors(~~(Math.random() * 32), (~~(Math.random() * 32))),\r\n      pos: [\r\n        Math.random() * roomWidth * cols,\r\n        Math.random() * roomDepth,\r\n        ~~(Math.random() * rows + 1) * roomHeight], scale: 1\r\n    })\r\n\r\n\r\n  /*pointer = createSprite({ ...SimpleLayout, bits: [[0x8, \"50\"]], pos: [20, 10, roomHeight - cat.size[1]], })\r\n  repositionSprite(pointer);*/\r\n\r\n}\r\n\r\nlet lastt = 0, fps = 0;\r\nfunction loop(t) {\r\n  let dt = t - lastt || 1;\r\n  lastt = t;\r\n  fps = fps * .9 + (1000 / dt) * .1;\r\n  FPS.innerText = `FPS: ${~~fps}`;\r\n  entities.forEach(s => (s.actionsQueue.length || s.animation) && updateEntity(s))\r\n  requestAnimationFrame(loop)\r\n}\r\n\r\nloop(0)"],
  "mappings": "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",
  "names": ["convertPalette", "raw", "v", "parsePalette", "pineapple32", "recolor", "s", "filter", "t", "gcx", "constructFilter", "filtered", "sprite", "margin", "c", "ctx", "cc", "quadSize", "cab", "filters", "a", "b", "palette", "f", "size", "options", "createPattern", "original", "numsToColors", "sum", "a", "b", "m", "v", "i", "sub", "vlen", "p", "c", "dist", "walkTo", "e", "to", "duration", "from", "start", "dist", "dx", "posDelta", "sub", "t", "timeFromStart", "sum", "finished", "CharLayout", "LegShape", "shapeAndColor", "GloveShape", "SimpleLayout", "lookRight", "roomWalkAnimation", "s", "fromRoom", "roomNumber", "current", "toRoom", "roomDoorPos", "updateEntity", "parentPos", "nextAction", "c", "pos", "transform", "createCanvas", "cc", "updateCanvas", "i", "b", "gcx", "recolor", "outl", "lastSpriteId", "createEntity", "entities", "removeEntity", "takeEntity", "dropEntity", "roomWidth", "cols", "roomHeight", "n", "simple", "shape", "colors", "SimpleLayout", "curFront", "curBack", "curSprite", "toCSSColor", "r", "g", "b", "a", "printPalette", "p", "i", "bg", "showPaletteMenu", "i", "palette", "bg", "toCSSColor", "b36", "showMenu", "printPalette", "outl", "o", "debOnDown", "e", "x", "y", "fl", "v", "mouseTarget", "p", "createDebugSprite", "roomHeight", "updateEntity", "curSprite", "curFront", "curBack", "createEntity", "SimpleLayout", "mpress", "sp", "zoom", "setActions", "e", "a", "initControls", "debOnDown", "x", "y", "fl", "v", "mouseTarget", "to", "roomHeight", "roomNumber", "actions", "current", "roomWalkAnimation", "dropEntity", "ts", "entities", "s", "takeEntity", "mul", "rezoom", "id", "prepareScene", "s", "i", "cols", "roomWidth", "rows", "roomHeight", "roomDepth", "d", "loadTextures", "solid", "filtered", "transp", "outl", "brickPattern", "createPattern", "recolor", "cb", "gcx", "wallPattern", "div", "floorPattern", "roomDepth", "rows", "cols", "roomHeight", "roomWidth", "quadSize", "roomsNum", "palette", "parsePalette", "convertPalette", "pineapple32", "filters", "solid", "transp", "outl", "catSprite", "cat", "pointer", "current", "entities", "init", "prepareScene", "loadTextures", "showMenu", "rezoom", "initControls", "createEntity", "CharLayout", "simple", "i", "SimpleLayout", "numsToColors", "lastt", "fps", "loop", "dt", "s", "updateEntity"]
}
